apply plugin: "com.android.application"

def envPath = ".env"

project.ext.envConfigFiles = [
    debug: envPath,
    release: envPath,
    market: envPath,
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

project.ext.vectoricons = [
    iconFontNames: [ 'iconfont.ttf' ]
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def getAppVersion() {
    def inputFile = new File("../package.json")
    def packageJson = new groovy.json.JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}

def appVersion = getAppVersion()
def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}
def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ReactNativeWebView_' + name]
}

def releaseTime() {
  return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    flavorDimensions 'market'
    productFlavors {
        marketDefault {
            dimension 'market'
            buildConfigField 'String', 'MARKET', '""'
        }
        // market1 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"01"'
        // }
        // market2 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"02"'
        // }
        // market3 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"03"'
        // }
        // market4 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"04"'
        // }
        // market5 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"05"'
        // }
        // market6 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"06"'
        // }
        // market7 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"07"'
        // }
        // market8 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"08"'
        // }
        // market9 {
        //     dimension 'market'
        //     buildConfigField 'String', 'MARKET', '"09"'
        // }
    }

    defaultConfig {
        applicationId project.env.get("APP_ID")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1048577
        versionName appVersion
        missingDimensionStrategy 'react-native-camera', 'general'
        ndk {
            // Tells Gradle to build outputs for the following ABIs and package
            // them into your APK.
            abiFilters 'armeabi-v7a'
        }
        packagingOptions {
            exclude "lib/arm64-v8a/libimagepipeline.so"
        }
        multiDexEnabled true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    // splits {
    //     abi {
    //         reset()
    //         enable enableSeparateBuildPerCPUArchitecture
    //         universalApk true // If true, also generate a universal APK
    //         include "armeabi-v7a"
    //     }
    // }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
                v2SigningEnabled false
            }
        }
        debug {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
                v2SigningEnabled false
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.env.get("APP_NAME")}-${variant.productFlavors[0].name}-${variant.versionName}-${releaseTime()}.apk"
          //outputFileName = "${project.env.get("APP_NAME")}-${variant.versionName}-${releaseTime()}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = ['src/main/res' + project.env.get("PACKAGE_SUFFIX")]
            assets.srcDirs = ['src/main/assets' + project.env.get("PACKAGE_SUFFIX")]
        }
    }
}

repositories {
    maven {
        url "http://dl.bintray.com/lukaville/maven"
    }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
    implementation project(':react-native-background-job')
    implementation project(':react-native-system-setting')
    implementation project(':react-native-file-selector')
    implementation project(':react-native-view-shot')
    implementation project(':realm')
    implementation project(':react-native-orientation')
    implementation project(':react-native-fs')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-config')
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.android.gms:play-services-gcm:${safeExtGet('googlePlayServicesVersion', '+')}"
    implementation 'me.leolin:ShortcutBadger:1.1.8@aar'
    implementation "com.google.firebase:firebase-messaging:${safeExtGet('firebaseVersion', '+')}"
    implementation 'com.google.android.material:material:1.0.0-beta01'
    implementation "androidx.appcompat:appcompat:${rootProject.ext.supportLibVersion}"
    implementation 'androidx.media:media:1.0.0-rc01'
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.facebook.fresco:animated-gif:1.10.0'
    implementation 'com.flurry.android:analytics:11.6.0@aar'
    // implementation 'org.nanohttpd:nanohttpd:2.3.1'
    // implementation 'com.tencent.bugly:crashreport:latest.release'
    // implementation 'com.tencent.bugly:nativecrashreport:latest.release'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
